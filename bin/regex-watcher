#!/usr/bin/env node

const async = require('async');
const slack = require('slack');
const bot = slack.rtm.client();
const token = process.env.SLACK_BOT_TOKEN;

function warn (user, item) {
  return `
  USER @${user} JUST POSTED ${item} ADDRESS. THE GRID+ TEAM WILL NEVER POST ADDRESSES TO SLACK.
  WE WILL NEVER POST LINKS TO MYETHERWALLET OR ANY OTHER SITE TO REQUEST PAYMENT VIA SLACK.
  CHANNEL ADMINS HAVE BEEN NOTIFIED. MALICIOUS BEHAVIOR IN THIS CHANNEL WILL RESULT IN BANNING.
  GRID+ TAKES THE SECURITY OF ITS USERS VERY SERIOUSLY, AND WILL ACT TO PROTECT THEM.
  :warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:\t\t\t:warning:
  `;
}

const pairs = [
  {
    format: (user) => {
      return warn(user, 'A NAMED ETHEREUM ADDRESS');
    },
    regex: /\s?\S+\.eth($|\s|[\.:;?|=\-\+"'`~@#$%^&*\(\),!"'\/\$])/i
  },
  {
    format: (user) => {
      return warn(user, 'AN ETHEREUM ADDRESS');
    },
    regex: /(0x)?[a-km-zA-HJ-NP-Z0-9]{40}/i
  }, {
    format: (user) => {
      return warn(user, 'A BITCOIN ADDRESS');
    },
    regex: /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/i
  },
  {
    format: (user) => {
      return warn(user, 'A MyEtherWallet LINK');
    },
    regex: /MyEtherWallet/i
  }
];

bot.message((message) => {
  let index = 0;

  if (message.subtype === 'bot_message') return;

  if ( ! message.user && ! message.subtype === 'message_changed') return; // message is from our bot. ignore

  const messageText = message.text ? message.text : message.message ? message.message.text : null; // updated messages have a message child property containing the change https://api.slack.com/events/message/message_changed

  if ( ! messageText) return;

  if ( ! pairs.some((pair) => {
    return pair.regex.test(messageText);
  })) return; // no matches. bail

  const firstMatch = pairs.find((pair) => pair.regex.test(messageText));

  let {channel, user} = message;

  if ( ! user) user = message.message.user; // message_updated type has nested changed message with user

  slack.users.info({token, user}, (err, user) => {
    if (err) throw err;

    const text = firstMatch.format(user.user.name);

    console.log(`sending warning to channel/conversation ${channel} for user ${user.user.name} and matched address ${messageText.match(firstMatch.regex)}:`);
    console.log(text);

    slack.chat.postMessage({token, channel, text}, (err) => {
      if (err) console.error(err);
    });

  });

});

bot.listen({token});